package scaler.module1.modulararithmeticintroduction;

public class AQ4ModString {
//    Problem Description
//    You are given a large number in the form of a string A where each character denotes a digit of the number.
//    You are also given a number B. You have to find out the value of A % B and return it.
//            Problem Constraints
//1 <= A.length() <= 105
//        0 <= Ai <= 9
//            1 <= B <= 109
//    Input Format
//    The first argument is a string A.
//    The second argument is an integer B.
//            Output Format
//    Return a single integer denoting the value of A % B.
//            Example Input
//    Input 1:
//    A = "143"
//    B = 2
//    Input 2:
//    A = "43535321"
//    B = 47
//    Example Output
//    Output 1:
//            1
//    Output 2:
//            20
//    Example Explanation
//    Explanation 1:
//            143 is an odd number so 143 % 2 = 1.
//    Explanation 2:
//            43535321 % 47 = 20

    public static void main(String[] args) {
        String input1A = "143";
        int input1B = 2;
//        System.out.println(new AQ4ModString().findMod(input1A, input1B));
        String input2A = "43535321";
        int input2B = 47;
        System.out.println(new AQ4ModString().findMod(input2A, input2B));

        String input3A = "0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999";
        int input3B = 47;
//        System.out.println(new AQ4ModString().findMod(input3A, input3B));
        String input4A = "842554936302263";
        int input4B = 41;
        System.out.println(new AQ4ModString().findMod(input4A, input4B));     //7

        String input5A = "2835990405438645878276129001894166223585785622045294801060602347163556611864753889971203595500417585503075595783711700402284669267278";
//        String input5A = "283599040543864587827612900";
        int input5B = 76296;
//        System.out.println(new AQ4ModString().findMod(input5A, input5B));     //41750
        String input6A = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        int input6B = 76296;
//        System.out.println(new AQ4ModString().findMod(input6A, input6B));     //41750
    }

    public int findMod1(String A, int B) {

        String substring = A;
        String remaining = A;
        int count = 1;
        double powerMod = Math.pow(10, 18) % B;

        long parseLong = 0;
        while (!substring.isEmpty()) {
            if (remaining.length() <= 0) {
                break;
            }
            if (remaining.length() < 19) {
                parseLong += Long.parseLong(remaining);
                substring = "";
            } else {
                substring = remaining.substring(remaining.length() - 18);
                remaining = A.substring(0, A.length() - count * 18);
                System.out.println("Long.parseLong(substring) : " + Long.parseLong(substring));
                parseLong += (long) ((Long.parseLong(substring) % B) * Math.pow(powerMod, count - 1)) % B;
                count++;
            }
            //            System.out.println(parseLong);
        }
        return (int) (parseLong % B);
    }

//    > TestCase - Hard Failed
//    Wrong Answer
//    Your program's output doesn't match the expected output. You can try testing your code with custom input and try putting debug statements in your code.
//    Your submission failed for the following input
//            (Following input test case is truncated. You can still do Run as Custom Input to test your code on the entire test case)
//    A : "3376898841522342834792197102831338978634062857762339664615692010714685631748480996829937192104259262424872762596517608044979420542708666743458896479136092012767496688895513519555848198260764914906670631846799960435160707629006101430166546095548682631860739587443863897927684362148724506609815557845535231697087509227286038157599439280224986052996828698088216189946013668575524907265667247131387474938368178468079010372182011031233484882674550991596360824830175520964874580105179034931781543707620109869769118119799177320500574150447492365886949309340476260669960803498920785953713647465240635048613482289487061515480216842329010406405981459869190869480607609094486750530496181295755142176871565484768439348580675421001336014205273490829794313792170617150403387710598035098198270458045270473136980513878470562279665708209818829482225154038628599853023100305044028233583618388571842505768494040157722610593622993833160496141088413544245475976574396195950599515937278471017525027142445708695956854661488147795944764517567800867269045065555028785760280065552279442138564318816409995228748407102614395019781363895458290775451365159373241102662307723598525423236286243785052522444851552017911997756835401244238797142245830670463384651888364818442876185266021878772823267201484228174041281930302458772624825823083777494928668536720477844020638880209838018159277840919311737533012788843462563170397272739270006976449876011313077045442405463402973756486714091209510758895222491645521848846699937982254853911290411360302244786035897204243093172120257790249895238325439092196218117849110481582956740777303208659410322641858361618232336135594660944051582341971152220842515457449335468828023659704577478492619713372644300516540853861188732325364264170562688966802896479757999928484471119733772487950620842457291256239831613433548663863805792531363403529871564230340846488869227584532554103787961161239261338616248605351273960362474527145417595631266479784368890586162765699390945711597568683708677801725754890167006014567632722580335414135725083420277463443694512136529225927195598257027692631173044260853900267935973401315740433293512595276620082252587388154618602956228858566358587263763673324481416591278138855796653473285668903079722833230971307919392714730357921844032803910515734263136627890468425923956901319917719471356893561563070810247728635189340040511220408323922799484557093122643949789565086754840165355527079970381994304318072018417861393087588838839013777594721899566853125413852327638801041543247080032705230168704452655660794781151266133550008304106149919927871737715796738855294860815950140666721661228863649039317771456828660241471033690226917872334645054222263918318007674395082167978700099547288415370930597596312880973098179256503402512053997630300290154346828633105670927011812773881881360369802786469274826385717317399103378680867135872494806284653738540535865979979809849525984825964978050587206476348644138844111776865951818271751674807310203353837385662594990536749158494557190346706464111421695112387565369918234929170751883832914723926262739282202048751888139871791494276238969797659422349899376834600271449211356573251117029555171570798812279262345741596538793517255046880124703564232576858442980278852110868568079903053246636065460962055650298306331273803259479166535089702256467261911595131986850675954345632087063195083067084555738185685504763245562754906710893757676314594971308578936041543409242528182336583257658847550025697555339259881990955960320706621807094551167659736707036057774843556934871364904340922802988463284209476989446069860380765251437279077085439725997089716250068474693928907017919180901820259920481571879190002866839305661861772004859236922336319262041038525915950968791685836160877127261482427640519737066344748544819049903788008717016450409546079974636353838502515722320272854680066421656802544697257939102813469470542355825146689795527645403917721313371749043872792335530142467732981983475318932760909144985492002960926621218440745945435071341752397716483499108871650706840494963159767590599074161292247382134603740185960046387130518991292166924243423792241330700402523721608792554988617060763294955134358707272373206908399296337644472138439753966596084397339441039233234368433817674005455274302388775332960106996200055841072551508890267695352139647506886381304223286421693705778860871880754510046976657145116662155851204700062639297887905200517420088361334106500981275882639954887915305178443072115537434181222106338745138733479179821062995888862467004293870358899414690866534120087603211759954115681266610532847606019771263884224773757438601490100500748983349966829131595741158141927397838837486458475015117101696506269575894758934288845597272865550018097559227389083973816219163798635797058771213167991599941057293978583193349464645303655751158400926755826264744277632788910249084934906775900607350548966133030449544618177735624394811465122757348776284625320843678780365128059776432626853029274955742073129817525059106720538774802982439797983134722650285705002098421706421383568487590904182246925314140301074183449833845242066244915425806618436746596320918315037499855376086022355345673855199501871742960268239102594115337739056245332363057718510467674845959923384713206917744580823269053751252868280457400333217411816707817529534319995156680051829706055243109245926564348516891602857245543663760586991537977098378887896449005721963277712908923382742672412319128986043890310333352882283718001338883441413165109734924166965669684275154166004809021164904756639447542764098196270312744706617225294287629521021201937431415187712649640288810306249493630087857474256256792929152061868220577166799398544819358249658216314048058858480528935370437648375091753899052162513778499882568548167395473450315867064378856167090956395429583099648051211451388571259633037802942401471733254400318458680995539568248684435510025592528883504426057020641052881798939461751898276303011999229255001487271828971282011673872667024010474003958305350590758822237017361045197892535309354365777328538013363809818617470138248499915464094486777681077045970302213797335844723625827352851049124449755282547181285374265964733965236236581772903945250072009872466277004880293842621403437036642922677479119684706395732080451001865602069803574193704399921190603894051651031669520390675482451170486734844796174066751288667792840981237278761345421586601017610205778472416303593019332558436760616266987652226282289504439038005056940919445960425425232285712870181088368618672101766541833538517115374833138550483584256238524810934516249147148717197820944760684254170157208362024224887155673467324381939605944832496576233603038956903948610520858525269127021404383280684032203366044316096038298114441636346282793173860360085923547350065821840399112015793448496692898682735104458737950304606533482148049691467367273880976816625569784348748172846203316632858425159278479859240944002855435268995550191305865206638842642570370123451407888952853507901450013691014096417785116524004033340699989206861371283258951846414608886706276141061242970583376916700600522111409901530294758796333789592419791356050947097140323295777708401180008068310998355537845566755028880619022984446778991853110989509556171691257868393198406075508835925811259671257127522973003872699688861869730244815349899079564454023264821678627986171524780904829750085789688063756493613422276064745694917991367415892309162473510570296879856938436860251865021861617019130600529576045102543794044033531039180272576300261029249173784043867695055844945798998096767588967216184052747118600160151662764341751987695362281222258597130345795746917576304512028629534357837956624077987018610587680752572641292867365960417465117704677957942656317580148783831935821688063718947463372492700545756914437550638537273874072272958568094255431998122957469562109242291549314662429087623597708265423082634448448756355411589210839098717358449261216115898100297084303903662818157073737801430186514067369438573850053652618410449316483832763179209433731287543451073890573114009266100451162271390939292766359797810744974628364097713536690819435258828240457757166798415538893356137495625687478142833360949537256592064093532705769579928631623982315052416560977630842277589842953437518989450488790174724132214481246015245691740975654378602554084653859928654306441304409998498354169108856271604176072278406378672771507081113420215682981636758075835132204581441734781437983580410785187333411796008795283149029766607697299764960810502615199318896073757122959057350688563768260639185734767038348362684406104304319427766350150963921125937398453894322834313979338369953337519486576258440736085185949994596129321476500715714854050297420160359094761712822870715746363856204617189831876602365638373691392050129999310101346552247760430209690178818135789609875409843780772998700912077360144450052237379634561201823326781460937340830099785644830304244733994076663112241518013709318570260620980415628893455721700428472181683408578157001409169802239837989590162444634953878725199141404454461235945172965023296606856872138450354122767289770462431194200964784238140328211725272991221364479250492570186345495961712194696622362756917574823013184446833408499504434912173817763785230972717589594749434399262613860130755077422474574293520294218987584690126372981908447123954086357921927851795435543790342124585153813192687420916600838916543289263320850134672526803218990440591396460959242249110169413111044595591632227506196076267626777713582999904224184764531099299392109655659360829314015372120155658881966983338937099900594158283408470999642341825623207048201063023886855938778468524604500600556119425091910171499192737509470309271909029531618156503282694045095426309133346884753771711112951146470188375851230360741887143694969541982710086464416846086926824718343943051546850409814501631988727666695215592152181366676343916800231755235548133876358554344492012816463904335153974142785686900165568855391205799147977107688720267672896218937832296215481430407995670260790235465060808302550630..."
//    B :
//
//    Test As Custom Input
//    The expected return value:
//            599374528
//    Your function returned the following:
//            639045383

    public int findMod(String A, int B) {
        long powOf10 = 1;
        long mod = B;
        long ans = 0;
        for (int i = A.length() - 1; i >= 0; i--) {
            int currentNo = Integer.parseInt(String.valueOf(A.charAt(i)));
            powOf10 = powOf10 % B;
            ans = ans + ((currentNo * powOf10) % mod);
            //ans = ans % B;
            powOf10 = 10 * powOf10;
        }
        return (int) (ans % B);
    }

//    public int findMod(String A, int B) {
//        if (A.length() < 20) {
//            return (int) (Long.parseLong(A) % B);
//        }
//
//        String substring = A;
//        String remaining = A;
//        int count = 1;
//        double powerMod = Math.pow(10, 18) % B;
//        int noOfIterations = A.length() / 18;
//
//        long parseLong = 0;
//        for (int i = 0; i < noOfIterations; i++) {
//            if (remaining.length() <= 0) {
//                break;
//            }
//            if (remaining.length() < 19) {
//                parseLong += Long.parseLong(remaining);
//            } else {
//                substring = remaining.substring(0, 18);
//                remaining = A.substring(18);
//                System.out.println("Long.parseLong(substring) : " + Long.parseLong(substring));
//                parseLong += (long) ((Long.parseLong(substring) % B) * Math.pow(powerMod, count - 1)) % B;
//                count++;
//            }
//        }
//    }
}

