package scaler.module1.arrays.arrayandmaths;

import java.util.HashMap;
import java.util.Map;

public class AQ4NBy3RepeatNumber {
    //    Problem Description
//    You're given a read-only array of N integers. Find out if any integer occurs more than N/3 times in the array in linear time and constant additional space.
//    If so, return the integer. If not, return -1.
//    If there are multiple solutions, return any one.
//    Problem Constraints
//1 <= N <= 7*105
//            1 <= A[i] <= 109
//    Input Format
//    The only argument is an integer array A.
//    Output Format
//    Return an integer.
//            Example Input
//[1 2 3 1 1]
//    Example Output
//1
//    Example Explanation
//1 occurs 3 times which is more than 5/3 times.
    public int repeatedNumber2(int[] A) {
        int majorityElement1 = Integer.MAX_VALUE;
        int count1 = 0;
        int majorityElement2 = Integer.MAX_VALUE;
        int count2 = 0;

        for (int i = 0; i < A.length; i++) {
            if (majorityElement1 == A[i]) {
                count1++;
            } else if (majorityElement2 == A[i]) {
                count2++;
            } else if (majorityElement1 == Integer.MAX_VALUE) {
                majorityElement1 = A[i];
                count1 = 1;
            } else if (majorityElement2 == Integer.MAX_VALUE) {
                majorityElement2 = A[i];
                count2 = 1;
            } else {
                if (count2 <= count1) {
                    count2--;
                    if (count2 == 0) {
                        majorityElement2 = Integer.MAX_VALUE;
                    }
                } else {
                    count1--;
                    if (count1 == 0) {
                        majorityElement1 = Integer.MAX_VALUE;
                    }
                }
            }

            System.out.printf("majorityElement1(%s : %s) - majorityElement2(%s : %s) %n", majorityElement1, count1, majorityElement2, count2);
        }


        int freq1 = 0;
        int freq2 = 0;
        for (int i = 0; i < A.length; i++) {
            if (majorityElement1 == A[i])
                freq1++;
            if (majorityElement2 == A[i])
                freq2++;
        }
        System.out.printf("majorityElement1(%s : %s) - majorityElement2(%s : %s)  length : %s%n", majorityElement1, freq1, majorityElement2, freq2, A.length);
        int ans = Math.max(freq1, freq2);
        if (ans > A.length / 3) {
            if (freq1 > freq2) return majorityElement1;
            else
                return majorityElement2;
        }
        return -1;
    }

    public int repeatedNumber(int[] A) {
        int majorityElement1 = Integer.MAX_VALUE;
        int count1 = 0;
        int majorityElement2 = Integer.MAX_VALUE;
        int count2 = 0;

        for (int i = 0; i < A.length; i++) {
            if (majorityElement1 == A[i]) {
                count1++;
            } else if (majorityElement2 == A[i]) {
                count2++;
            } else if (count1 == 0) {
                majorityElement1 = A[i];
                count1 = 1;
            } else if (count2 == 0) {
                majorityElement2 = A[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        int freq1 = 0;
        int freq2 = 0;
        for (int i = 0; i < A.length; i++) {
            if (majorityElement1 == A[i])
                freq1++;
            if (majorityElement2 == A[i])
                freq2++;
        }
//        System.out.printf("%s - %s - %s - %s - %s%n", majorityElement1, majorityElement2, freq1, freq2, A.length);
        int ans = Math.max(freq1, freq2);

        if (ans > A.length / 3) {
            if (freq1 > freq2) {
                return majorityElement1;
            } else
                return majorityElement2;
        }
        return -1;
    }

    public static void main(String[] args) {
//        int[] A = {1, 2, 3, 1, 1};
//        System.out.println(new AQ4NBy3RepeatNumber().repeatedNumber(A));
//
//        int[] B = {1, 1, 1, 2, 3, 5, 7};
//        System.out.println(new AQ4NBy3RepeatNumber().repeatedNumber(B));
//
//        int[] C = {1000545, 1000038, 1000647, 1000038, 1000562, 1000038, 1000586, 1000487, 1000951, 1000226, 1000038, 1000145, 1000038, 1000761, 1000196, 1000038, 1000821, 1000829, 1000038, 1000570, 1000846, 1000038, 1000178, 1001000, 1000038, 1000568, 1000278, 1000734, 1000048, 1000038, 1000002, 1000271, 1000388, 1000315, 1000816, 1000038, 1000038, 1000846, 1000305, 1000853, 1000383, 1000116, 1000797, 1000279, 1000038, 1000038, 1000049, 1000108, 1000789, 1000240, 1000201, 1000506, 1000429, 1000857, 1000649, 1000898, 1000211, 1000000, 1000178, 1000038, 1000569, 1000695, 1000451, 1000159, 1000038, 1000038, 1000038, 1000129, 1000038, 1000038, 1000904, 1000038, 1000038, 1000902, 1000525, 1000038, 1000166, 1000038, 1000765, 1000038, 1000561, 1000417, 1000523, 1000668, 1000296, 1000038, 1000038, 1000038, 1000461, 1000654, 1000924, 1000985, 1000038, 1000426, 1000038, 1000038, 1000038, 1000904, 1000775, 1000148, 1000961, 1000038, 1000038, 1000038, 1000833, 1000332, 1000038, 1000038, 1000512, 1000322, 1000592, 1000524, 1000788, 1000057, 1000497, 1000625, 1000599, 1000484, 1000038, 1000747, 1000457, 1000111, 1000038, 1000038, 1000493, 1000287, 1000007, 1000695, 1000344, 1000098, 1000038, 1000191, 1000038, 1000576, 1000481, 1000488, 1000199, 1000038, 1000663, 1000176, 1000038, 1000521, 1000721, 1000728, 1000247, 1000038, 1000038, 1000460, 1000644, 1000038, 1000497, 1000966, 1000431, 1000038, 1000975, 1000063, 1000580, 1000669, 1000038, 1000038, 1000492, 1000038, 1000038, 1000529, 1000553, 1000333, 1000038, 1000341, 1000569, 1000862, 1000017, 1000532, 1000571, 1000508, 1000402, 1000285, 1000611, 1000210, 1000646, 1000110, 1000038, 1000553, 1000273, 1000729, 1000038, 1000038, 1000720, 1000400, 1000038, 1000983, 1000038, 1000766, 1000038, 1000180, 1000494, 1000765, 1000136, 1000038, 1000029, 1000246, 1000991, 1000038, 1000759, 1000038, 1000038, 1000045, 1000038, 1000648, 1000038, 1000038, 1000694, 1000914, 1000990, 1000038, 1000038, 1000758, 1000435, 1000038, 1000554, 1000038, 1000452, 1000156, 1000038, 1000322, 1000828, 1000868, 1000038, 1000973, 1000991, 1000464, 1000294, 1000633, 1000038, 1000582, 1000229, 1000285, 1000038, 1000038, 1000086, 1000038, 1000989, 1000038, 1000038, 1000157, 1000307, 1000369, 1000300, 1000038, 1000038, 1000038, 1000244, 1000038, 1000038, 1000222, 1000458, 1000038, 1000523, 1000434, 1000316, 1000038, 1000256, 1000038, 1000695, 1000038, 1000469};
//        System.out.println(new AQ4NBy3RepeatNumber().repeatedNumber(C));
//
//        int[] D = {1000274, 1000802, 1000914, 1000847, 1000073, 1000562, 1000741, 1000802, 1000965, 1000371, 1000406, 1000441, 1000179, 1000802, 1000552, 1000802, 1000100, 1000724, 1000024, 1000134, 1000313, 1000802, 1000977, 1000777, 1000206, 1000412, 1000802, 1000570, 1000802, 1000518, 1000691, 1000959, 1000903, 1000802, 1000802, 1000273, 1000802, 1000802, 1000265, 1000706, 1000677, 1000802, 1000843, 1000802, 1000061, 1000802, 1000802, 1000975, 1000403, 1000150, 1000959, 1000889, 1000177, 1000416, 1000491, 1000177, 1000807, 1000989, 1000489, 1000447, 1000802, 1000860, 1000104, 1000802, 1000570, 1000015, 1000802, 1000802, 1000593, 1000802, 1000802, 1000326, 1000802, 1000802, 1000120, 1000772, 1000965, 1000802, 1000887, 1000802, 1000567, 1000973, 1000577, 1000820, 1000922, 1000802, 1000982, 1000525, 1000369, 1000829, 1000740, 1000159, 1000909, 1000510, 1000402, 1000802, 1000802, 1000239, 1000247, 1000328, 1000427, 1000802, 1000519, 1000296, 1000114, 1000149, 1000802, 1000802, 1000107, 1000841, 1000017, 1000909, 1000192, 1000425, 1000088, 1000077, 1000506, 1000163, 1000465, 1000626, 1000371, 1000802, 1000179, 1000306, 1000159, 1000802, 1000802, 1000848, 1000138, 1000306, 1000802, 1000881, 1000828, 1000802, 1000008, 1000802, 1000456, 1000802, 1000880, 1000579, 1000434, 1000163, 1000188, 1000802, 1000802, 1000231, 1000945, 1000802, 1000070, 1000727, 1000802, 1000802, 1000802, 1000051, 1000644, 1000802, 1000802, 1000057, 1000967, 1000802, 1000802, 1000366, 1000802, 1000485, 1000802, 1000061, 1000212, 1000192, 1000577, 1000559, 1000802, 1000189, 1000802, 1000802, 1000107, 1000177, 1000011, 1000802, 1000987, 1000400, 1000802, 1000402, 1000024, 1000009, 1000118, 1000046, 1000349, 1000250, 1000282, 1000138, 1000405, 1000295, 1000802, 1000878, 1000166, 1000802, 1000135, 1000005, 1000723, 1000491, 1000802, 1000802, 1000802, 1000802, 1000786, 1000306, 1000802, 1000802, 1000802, 1000639, 1000683, 1000880, 1000329, 1000408, 1000822, 1000947, 1000802, 1000455, 1000037, 1000311, 1000802, 1000802, 1000339, 1000802, 1000519, 1000401, 1000802, 1000256, 1000802, 1000802, 1000503, 1000802, 1000787, 1000802, 1000802, 1000384, 1000456, 1000845, 1000802, 1000802, 1000000, 1000213, 1000629, 1000802, 1000226, 1000802, 1000802, 1000107, 1000100, 1000802, 1000587, 1000882, 1000049, 1000623, 1000802, 1000178, 1000788, 1000648, 1000802, 1000567, 1000802, 1000802, 1000802, 1000085, 1000109, 1000965, 1000353, 1000802, 1000802, 1000802, 1000982, 1000663, 1000829, 1000578, 1000753, 1000802, 1000802, 1000529, 1000060, 1000047, 1000802, 1000750, 1000780, 1000277, 1000802, 1000751, 1000590, 1000802, 1000953, 1000240, 1000218, 1000659, 1000802, 1000001, 1000766, 1000802, 1000508, 1000802, 1000802, 1000802, 1000028, 1000802, 1000493, 1000077, 1000427, 1000505, 1000752, 1000802, 1000747, 1000126, 1000269, 1000297, 1000394, 1000257, 1000708, 1000802, 1000802, 1000697, 1000802, 1000802, 1000802, 1000921, 1000559, 1000450, 1000206, 1000802, 1000802, 1000149, 1000031, 1000866, 1000721, 1000497, 1000654, 1000057, 1000802, 1000130, 1000523, 1000577, 1000750, 1000536, 1000339, 1000796, 1000802, 1000802, 1000197, 1000584, 1000939, 1000802, 1000633, 1000553, 1000124, 1000086, 1000619, 1000802, 1000415, 1000802, 1000125, 1000802, 1000104, 1000348, 1000464, 1000187, 1000887, 1000369, 1000281, 1000802, 1000802, 1000526, 1000685, 1000029, 1000922, 1000191, 1000802, 1000802, 1000802, 1000298, 1000802, 1000176, 1000295, 1000802, 1000802, 1000238, 1000802, 1000802, 1000314, 1000303, 1000802, 1000698, 1000309, 1000677, 1000606, 1000802, 1000701, 1000898, 1000579, 1000990, 1000513, 1000435, 1000192, 1000960, 1000324, 1000509, 1000906, 1000802, 1000492, 1000705, 1000641, 1000479, 1000662, 1000642, 1000791, 1000942, 1000802, 1000802, 1000100, 1000296, 1000802, 1000802, 1000533, 1000802, 1000038, 1000802, 1000254, 1000802, 1000802, 1000802, 1000802, 1000393, 1000802, 1000435, 1000484, 1000802, 1000847, 1000802, 1000360, 1000961, 1000544, 1000914, 1000802, 1000802, 1000663, 1000802, 1000802, 1000519, 1000802, 1000928, 1000802, 1000802, 1000802, 1000802, 1000258, 1000108, 1000544, 1000802, 1000169, 1000097, 1000802, 1000306, 1000977, 1000802, 1000153, 1000802, 1000802, 1000039, 1000099, 1000802, 1000468, 1000862, 1000802, 1000802, 1000802, 1000068, 1000802, 1000161, 1000179, 1000710, 1000802, 1000802, 1000802, 1000802, 1000540, 1000802, 1000115, 1000802, 1000802, 1000089, 1000802, 1000798, 1000802, 1000802, 1000544, 1000979, 1000850, 1000085, 1000197, 1000802, 1000802, 1000031, 1000704, 1000515, 1000802, 1000198, 1000382, 1000597, 1000613, 1000857, 1000798, 1000319, 1000266, 1000154, 1000753, 1000017, 1000004, 1000802};//1000802 with freq 173
////        Map<Integer, Integer> map = new HashMap();
////        for (int i = 0; i < D.length; i++) {
////            map.put(D[i], map.getOrDefault(D[i], 0) + 1);
////        }
////        System.out.println(map);
//        System.out.println(new AQ4NBy3RepeatNumber().repeatedNumber(D));


        int[] E = {1000861, 1000963, 1000629, 1000629, 1000411, 1000629, 1000676, 1000789, 1000629, 1000629, 1000467, 1000101, 1000446, 1000534, 1000629, 1000846, 1000227, 1000629,
                1000930, 1000480, 1000629, 1000115, 1000597, 1000848, 1000629};
        Map<Integer, Integer> map = new HashMap();
        for (int i = 0; i < E.length; i++) {
            map.put(E[i], map.getOrDefault(E[i], 0) + 1);
        }
        System.out.println(map);
        System.out.println(new AQ4NBy3RepeatNumber().repeatedNumber(E));
    }
}
