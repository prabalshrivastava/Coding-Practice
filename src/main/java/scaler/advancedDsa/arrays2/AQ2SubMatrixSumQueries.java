package scaler.advancedDsa.arrays2;

import java.util.Arrays;

public class AQ2SubMatrixSumQueries {
//    Problem Description
//    Given a matrix of integers A of size N x M and multiple queries Q, for each query, find and return the submatrix sum.
//    Inputs to queries are top left (b, c) and bottom right (d, e) indexes of submatrix whose sum is to find out.
//            NOTE:
//    Rows are numbered from top to bottom, and columns are numbered from left to right.
//    Sum may be large, so return the answer mod 109 + 7.
//    Problem Constraints
//1 <= N, M <= 1000
//            -100000 <= A[i] <= 100000
//            1 <= Q <= 100000
//            1 <= B[i] <= D[i] <= N
//1 <= C[i] <= E[i] <= M
//    Input Format
//    The first argument given is the integer matrix A.
//    The second argument given is the integer array B.
//    The third argument given is the integer array C.
//    The fourth argument given is the integer array D.
//    The fifth argument given is the integer array E.
//            (B[i], C[i]) represents the top left corner of the i'th query.
//            (D[i], E[i]) represents the bottom right corner of the i'th query.
//    Output Format
//    Return an integer array containing the submatrix sum for each query.
//    Example Input
//    Input 1:
//    A = [   [1, 2, 3]
//            [4, 5, 6]
//            [7, 8, 9]   ]
//    B = [1, 2]
//    C = [1, 2]
//    D = [2, 3]
//    E = [2, 3]
//    Input 2:
//    A = [   [5, 17, 100, 11]
//            [0, 0,  2,   8]    ]
//    B = [1, 1]
//    C = [1, 4]
//    D = [2, 2]
//    E = [2, 4]
//    Example Output
//    Output 1:
//            [12, 28]
//    Output 2:
//            [22, 19]
//    Example Explanation
//    Explanation 1:
//    For query 1: Submatrix contains elements: 1, 2, 4 and 5. So, their sum is 12.
//    For query 2: Submatrix contains elements: 5, 6, 8 and 9. So, their sum is 28.
//    Explanation 2:
//    For query 1: Submatrix contains elements: 5, 17, 0 and 0. So, their sum is 22.
//    For query 2: Submatrix contains elements: 11 and 8. So, their sum is 19.

    public int[] solve(int[][] A, int[] B, int[] C, int[] D, int[] E) {
        long[][] pf = new long[A.length][];
        for (int i = 0; i < A.length; i++) {
            int sum = 0;
            pf[i] = new long[A[i].length];
            for (int j = 0; j < A[i].length; j++) {
                sum = sum + A[i][j];
                pf[i][j] = getModdedSum(sum);
            }
        }
//        System.out.println("row wise  : " + Arrays.deepToString(pf));
        for (int j = 0; j < A[0].length; j++) {
            long sum = 0;
            for (int i = 0; i < A.length; i++) {
                sum = sum + pf[i][j];
                pf[i][j] = getModdedSum(sum);
            }
        }
//        System.out.println("col wise  : " + Arrays.deepToString(pf));
//        System.out.println("pfsum = " + Arrays.deepToString(pf));
        int[] ans = new int[C.length];
        for (int i = 0; i < C.length; i++) {
            int a1 = B[i];
            int b1 = C[i];
            int a2 = D[i];
            int b2 = E[i];
            ans[i] = (int) getSum(pf, a1, b1, a2, b2);
        }
//        System.out.println("A[a1][b1] = " + A[a1 - 1][b1 - 1]);
//        System.out.println("A[a2][b2] = " + A[a2 - 1][b2 - 1]);
        return ans;
    }

    private long getSum(long[][] pf, int a1, int b1, int a2, int b2) {
        --a1;
        --b1;
        --a2;
        --b2;
//        System.out.println("a1 = " + a1);
//        System.out.println("b1 = " + b1);
//        System.out.println("a2 = " + a2);
//        System.out.println("b2 = " + b2);
        long sum = pf[a2][b2];
//        System.out.println(sum);
        if (a1 > 0)
            sum = (sum - pf[a1 - 1][b2]);
        sum = getModdedSum(sum);

//        System.out.println(sum);
        if (b1 > 0)
            sum = (sum - pf[a2][b1 - 1]);
        sum = getModdedSum(sum);
//        System.out.println(sum);
        if (a1 > 0 && b1 > 0)
            sum = (sum + pf[a1 - 1][b1 - 1]);
//        System.out.println(sum);
        sum = getModdedSum(sum);
        return sum;
    }

    private long getModdedSum(long sum) {
        if (sum < 0)
            sum = (long) ((sum + (Math.pow(10, 9) + 7)) % (Math.pow(10, 9) + 7));
        else
            sum = (long) (sum % (Math.pow(10, 9) + 7));
        return sum;
    }

    public static void main(String[] args) {
        int[][] input1A = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int[] input1B = {1, 2};
        int[] input1C = {1, 2};
        int[] input1D = {2, 3};
        int[] input1E = {2, 3};
        System.out.println(Arrays.toString(new AQ2SubMatrixSumQueries().solve(input1A, input1B, input1C, input1D, input1E)));//pfsum = [[1, 3, 6], [5, 12, 21], [12, 27, 45]]

        int[][] input2A = {{5, 17, 100, 11}, {0, 0, 2, 8}};
        int[] input2B = {1, 1};
        int[] input2C = {1, 4};
        int[] input2D = {2, 2};
        int[] input2E = {2, 4};
        System.out.println(Arrays.toString(new AQ2SubMatrixSumQueries().solve(input2A, input2B, input2C, input2D, input2E)));//pfsum = [[5, 22, 122, 133], [5, 22, 124, 143]]
        //expected output 22 19
        int[][] input3A =
                {
                        {45, 33, 29, 87, 45, 66, 32, 30, 75, 92, 56, 64, 94, 82, 11, 53, 74, 78, 100, 22, 2, 3, 85, 1, 23, 32, 2, 38, 47},
                        {17, 69, 76, 5, 48, 61, 70, 91, 96, 9, 34, 22, 74, 50, 54, 79, 24, 9, 60, 28, 32, 17, 88, 10, 48, 72, 15, 93, 8},
                        {40, 31, 6, 99, 44, 12, 51, 73, 40, 3, 58, 52, 81, 1, 2, 14, 85, 61, 5, 38, 75, 76, 61, 98, 33, 87, 89, 18, 12},
                        {28, 87, 2, 99, 22, 88, 85, 49, 100, 26, 73, 45, 18, 19, 53, 16, 36, 50, 5, 15, 4, 60, 51, 11, 19, 90, 50, 89, 83},
                        {42, 33, 22, 36, 71, 89, 10, 2, 4, 59, 89, 25, 17, 48, 5, 71, 4, 27, 16, 85, 85, 17, 20, 20, 52, 51, 66, 60, 23},
                        {17, 27, 9, 80, 11, 22, 16, 89, 24, 76, 50, 87, 29, 90, 89, 59, 37, 100, 89, 11, 39, 60, 65, 12, 55, 8, 61, 24, 62},
                        {81, 5, 82, 1, 96, 30, 46, 2, 99, 60, 99, 7, 88, 53, 26, 17, 60, 7, 71, 38, 81, 44, 41, 42, 87, 11, 72, 37, 38},
                        {33, 99, 61, 79, 9, 43, 10, 82, 29, 64, 57, 90, 46, 12, 76, 65, 48, 20, 85, 85, 28, 6, 58, 11, 59, 57, 55, 89, 62},
                        {98, 1, 77, 47, 44, 5, 67, 2, 11, 19, 73, 20, 7, 11, 98, 22, 79, 23, 18, 93, 50, 75, 48, 83, 42, 86, 45, 26, 70},
                        {61, 38, 59, 6, 30, 79, 5, 60, 89, 63, 58, 10, 54, 37, 87, 3, 4, 27, 30, 86, 39, 39, 58, 94, 83, 72, 56, 82, 91},
                        {19, 61, 52, 39, 34, 77, 7, 12, 80, 2, 4, 32, 60, 74, 7, 7, 35, 47, 49, 14, 43, 39, 80, 78, 20, 47, 45, 52, 84},
                        {85, 90, 47, 76, 76, 65, 10, 81, 73, 48, 17, 33, 62, 23, 84, 96, 79, 53, 72, 51, 34, 65, 27, 61, 16, 20, 53, 87, 41},
                        {73, 96, 14, 76, 46, 79, 8, 83, 28, 18, 84, 69, 71, 4, 58, 88, 27, 57, 70, 72, 52, 1, 54, 17, 64, 20, 59, 15, 57},
                        {48, 71, 64, 1, 40, 9, 59, 31, 41, 30, 14, 97, 29, 77, 54, 7, 46, 17, 50, 77, 85, 64, 79, 62, 96, 80, 30, 49, 80},
                        {12, 90, 29, 68, 93, 81, 8, 96, 77, 52, 30, 9, 77, 76, 81, 61, 68, 13, 85, 91, 19, 88, 5, 4, 4, 37, 6, 15, 41},
                        {44, 40, 42, 55, 42, 90, 98, 82, 15, 60, 55, 57, 65, 68, 9, 20, 22, 69, 32, 16, 75, 72, 38, 48, 43, 48, 66, 39, 7},
                        {23, 12, 57, 47, 15, 51, 71, 79, 60, 100, 13, 90, 62, 9, 10, 17, 65, 63, 20, 54, 99, 36, 28, 99, 36, 42, 13, 15, 24},
                        {63, 45, 4, 34, 97, 19, 60, 90, 54, 100, 9, 3, 31, 74, 100, 39, 94, 35, 84, 17, 63, 92, 46, 38, 51, 89, 72, 34, 45},
                        {27, 41, 17, 94, 59, 58, 40, 20, 68, 73, 11, 12, 79, 54, 24, 81, 54, 5, 39, 63, 17, 71, 8, 72, 5, 96, 92, 57, 2},
                        {39, 27, 29, 9, 8, 96, 42, 30, 100, 38, 84, 7, 12, 79, 41, 2, 96, 98, 46, 60, 49, 63, 82, 93, 13, 37, 41, 4, 1},
                        {45, 96, 72, 56, 17, 99, 13, 76, 55, 82, 4, 70, 69, 81, 31, 18, 100, 75, 5, 36, 20, 14, 54, 100, 16, 47, 43, 90, 76},
                        {68, 53, 55, 15, 41, 99, 68, 11, 84, 77, 41, 83, 19, 27, 53, 84, 52, 92, 68, 52, 55, 83, 87, 81, 87, 22, 26, 90, 32},
                        {11, 80, 55, 60, 7, 76, 44, 5, 3, 13, 8, 68, 4, 14, 50, 39, 75, 36, 41, 73, 74, 10, 91, 44, 22, 93, 68, 23, 58},
                        {81, 65, 59, 46, 25, 67, 40, 12, 54, 4, 62, 77, 47, 16, 49, 62, 25, 28, 98, 13, 94, 25, 70, 11, 23, 64, 66, 62, 65},
                        {90, 1, 85, 31, 41, 93, 72, 35, 99, 67, 19, 31, 32, 100, 58, 5, 83, 10, 13, 59, 31, 26, 71, 100, 92, 46, 14, 7, 65},
                        {68, 86, 50, 31, 13, 94, 93, 87, 63, 79, 5, 93, 84, 38, 94, 95, 100, 25, 68, 71, 33, 65, 9, 81, 61, 54, 57, 38, 54},
                        {31, 95, 4, 14, 30, 20, 23, 84, 3, 6, 25, 5, 43, 63, 22, 95, 4, 6, 71, 34, 29, 77, 34, 23, 48, 57, 2, 8, 69},
                        {62, 94, 72, 32, 92, 6, 94, 19, 88, 48, 15, 56, 24, 34, 38, 66, 43, 5, 59, 76, 54, 60, 97, 36, 53, 39, 63, 20, 84},
                        {31, 19, 83, 85, 46, 20, 19, 35, 30, 67, 30, 49, 66, 43, 29, 34, 73, 52, 48, 80, 31, 16, 54, 23, 21, 52, 6, 57, 99},
                        {98, 90, 97, 66, 6, 2, 83, 78, 97, 57, 83, 22, 22, 78, 47, 61, 44, 79, 4, 42, 36, 79, 36, 24, 36, 30, 97, 31, 12},
                        {88, 63, 41, 35, 72, 87, 29, 68, 77, 32, 45, 37, 31, 27, 88, 68, 31, 63, 23, 41, 99, 45, 59, 16, 55, 42, 17, 91, 59},
                        {85, 69, 38, 50, 63, 90, 77, 67, 14, 57, 54, 34, 87, 65, 100, 37, 30, 84, 53, 42, 33, 43, 52, 17, 13, 60, 31, 22, 72},
                        {66, 55, 51, 70, 29, 69, 23, 96, 87, 72, 56, 5, 19, 41, 32, 66, 39, 80, 82, 90, 49, 94, 13, 86, 42, 54, 6, 19, 33},
                        {27, 44, 43, 80, 26, 95, 85, 53, 71, 77, 1, 21, 100, 38, 94, 61, 48, 42, 62, 95, 41, 24, 24, 44, 49, 83, 15, 24, 79},
                        {25, 81, 71, 76, 100, 29, 75, 77, 6, 11, 93, 14, 22, 93, 1, 72, 74, 73, 67, 61, 50, 75, 61, 81, 26, 84, 31, 4, 38},
                        {61, 45, 25, 82, 88, 49, 21, 94, 20, 60, 25, 95, 5, 93, 77, 29, 71, 36, 63, 69, 76, 53, 100, 93, 69, 53, 15, 45, 94},
                        {68, 83, 50, 33, 21, 7, 30, 93, 28, 51, 5, 80, 44, 36, 64, 49, 5, 69, 85, 40, 53, 65, 73, 85, 86, 94, 8, 64, 4},
                        {87, 36, 12, 31, 94, 34, 50, 52, 16, 73, 38, 89, 90, 54, 58, 64, 43, 30, 22, 19, 84, 59, 71, 35, 68, 8, 57, 20, 93},
                        {20, 37, 99, 6, 88, 16, 65, 89, 42, 1, 69, 15, 15, 91, 79, 21, 92, 97, 49, 95, 68, 7, 24, 80, 9, 72, 84, 63, 24},
                        {89, 67, 1, 40, 64, 50, 8, 82, 21, 51, 53, 68, 42, 15, 58, 18, 18, 97, 33, 25, 90, 95, 35, 86, 9, 97, 73, 3, 98},
                        {7, 77, 70, 92, 88, 33, 2, 73, 92, 41, 73, 11, 11, 20, 90, 7, 43, 29, 96, 76, 93, 88, 54, 50, 76, 94, 16, 8, 8},
                        {74, 68, 74, 34, 18, 1, 99, 6, 96, 16, 33, 98, 75, 5, 8, 26, 11, 29, 52, 42, 11, 29, 34, 2, 16, 40, 5, 76, 17},
                        {42, 36, 59, 32, 65, 53, 53, 66, 6, 98, 54, 100, 45, 61, 26, 40, 36, 53, 83, 99, 35, 18, 90, 77, 100, 14, 92, 40, 3},
                        {18, 46, 9, 40, 75, 44, 14, 87, 88, 75, 69, 57, 88, 33, 91, 18, 58, 90, 87, 2, 24, 52, 97, 1, 24, 27, 10, 64, 60},
                        {49, 17, 37, 43, 86, 12, 52, 81, 32, 8, 87, 41, 19, 78, 89, 60, 12, 7, 54, 67, 51, 72, 100, 69, 81, 73, 1, 83, 57},
                        {42, 39, 36, 76, 11, 50, 85, 49, 1, 81, 36, 80, 47, 24, 11, 31, 99, 3, 1, 38, 59, 20, 60, 40, 70, 97, 72, 17, 88}
                };
        int[] input3B = {14, 12, 7, 7, 18, 13, 6, 18, 1, 33, 4, 7, 11, 16, 27, 9, 4, 8, 25, 25, 11, 34, 21, 6, 20, 1, 4, 16, 19};
        int[] input3C = {18, 8, 9, 11, 6, 4, 17, 7, 3, 1, 2, 13, 19, 4, 20, 8, 6, 1, 13, 1, 2, 25, 25, 11, 1, 23, 14, 18, 19};
        int[] input3D = {18, 35, 11, 12, 30, 39, 40, 19, 3, 37, 37, 44, 43, 30, 29, 17, 37, 29, 34, 41, 14, 38, 45, 30, 41, 24, 14, 29, 20};
        int[] input3E = {20, 19, 24, 22, 19, 4, 28, 13, 16, 9, 23, 13, 28, 21, 21, 21, 14, 18, 28, 4, 4, 27, 27, 14, 29, 25, 19, 28, 20};

//        Test As Custom Input
//        The expected return value= 723 14602 3772 3332 9086 1283 21278 650 2121 2508 37606 1827 16621 13258 304 6102 15117 19231 7755 3791 687 746 3484 4544 32796 3511 2974 7577 208
        System.out.println(Arrays.toString(new AQ2SubMatrixSumQueries().solve(input3A, input3B, input3C, input3D, input3E)));//
    }
}


//    Compiling your Code...
//        > Success!
//        Running Test Cases...
//        > TestCase - Easy Failed
//        Wrong Answer
//        Your program's output doesn't match the expected output. You can try testing your code with custom input and try putting debug statements in your code.
//        Your submission failed for the following input
//        (Following input test case is truncated. You can still do Run as Custom Input to test your code on the entire test case)
//        107 196 40 46 56 78 -72 -2 98 -21 94 19 23 76 -70 73 -86 52 36 22 74 -55 31 -16 23 14 88 -16 51 63 -63 -33 -72 -59 20 26 -4 -68 -10 -61 80 51 24 -67 32 57 -16 9 13 -81 76 29 83 83 -47 -6 -45 -13 -88 -13 67 -30 39 -63 -61 -49 -7 0 55 12 41 37 -67 73 60 -57 -82 -44 -92 69 -58 94 -29 41 41 -50 52 32 -97 100 -66 -23 -54 66 23 -17 8 -85 86 68 -97 28 -34 99 -24 78 62 -76 54 -3 71 25 30 56 17 -67 40 -69 -68 62 -15 89 13 73 -36 74 -38 -70 -100 -3 -54 -100 -37 8 39 -24 8 23 30 -64 -75 -92 42 69 70 -11 -88 -46 -52 -69 -21 -83 -26 100 -62 -67 -62 88 28 7 36 -7 -70 61 69 21 -95 -60 80 65 100 51 7 -43 0 95 -96 -38 -25 69 96 -77 -35 -93 100 -20 52 13 -75 20 -83 -40 89 -47 -69 -38 -20 -56 31 96 -94 82 -14 32 79 33 -20 39 59 -30 -1 -54 10 -59 -83 56 82 32 -84 67 -24 -83 -70 10 49 38 68 91 -58 79 -16 59 -63 48 81 63 9 -25 -20 59 12 17 -43 4 7 -76 31 0 30 12 38 -100 -71 -91 97 59 -77 33 11 67 96 23 -22 79 77 65 -4 -77 -32 -44 -93 -31 -65 59 -35 96 19 10 36 -58 -21 -19 35 -24 61 19 -46 -45 90 -90 -28 -37 -60 -10 61 6 42 29 -39 21 -88 -86 -16 -72 68 -11 88 54 88 77 5 40 90 5 60 64 -18 20 -27 2 -97 44 -69 71 43 -23 -51 -79 -9 -38 69 65 99 34 -4 -29 -57 77 -5 81 100 -57 25 61 83 -94 67 -53 -8 -61 32 -88 -47 70 -74 -88 2 -20 -74 -1 -15 -14 -32 -1 63 75 -1 -5 80 54 72 -12 -35 6 -92 72 -65 60 -63 -26 71 16 -54 23 -37 0 -19 -90 57 71 -25 38 -96 -56 13 -22 45 -43 66 -10 100 52 -24 88 67 -64 -45 -9 25 48 47 62 -69 -92 49 -46 -50 -17 88 -97 -53 -92 -33 26 18 82 56 -4 56 -8 89 -69 -88 -9 47 -66 -67 26 -29 -16 -82 -42 86 -50 -82 -50 8 -85 28 -79 45 -91 29 -88 -93 -33 2 -34 93 -38 9 -40 35 -93 -51 20 -41 -86 -17 -22 -72 -88 16 -67 -70 -98 -45 55 -89 71 60 -72 -65 -57 30 81 16 -49 5 66 -40 35 90 48 45 -95 37 -2 39 89 -91 -50 84 25 44 -27 -36 65 -56 73 -9 -59 -31 47 64 83 65 58 74 78 -34 -27 80 -6 -23 24 -16 48 -72 39 13 81 -87 54 -62 -88 -4 -18 46 60 14 2 -2 71 88 5 -67 -16 95 54 9 25 -19 83 56 74 -77 76 47 78 88 92 22 18 -7 92 56 99 -74 74 -66 52 18 39 30 -67 -36 36 87 46 39 15 -65 76 -77 -90 -83 40 73 86 6 89 -87 -15 79 -74 80 -45 -76 92 -8 -85 -47 38 84 85 12 92 19 -65 -18 28 -65 41 44 -14 -93 78 15 -87 37 -34 -84 -86 23 -88 -28 -32 21 71 72 78 -56 -67 -82 12 13 -92 16 7 49 -22 -70 -84 -48 53 -60 -91 8 -73 -32 -42 -84 41 65 -40 -21 -31 30 -70 21 88 29 70 74 -41 -99 -40 -73 -54 45 -100 -21 76 77 38 50 -83 35 -31 27 5 59 100 -21 75 -26 91 75 -61 -77 -30 -78 27 -55 -95 0 -68 56 -81 -32 -38 53 62 75 -5 35 27 89 8 -18 79 -88 -18 78 9 -20 -44 52 -41 -44 -64 -74 3 -54 73 53 93 -87 50 83 78 47 -49 28 8 -12 18 -35 42 -5 30 -30 14 23 32 19 29 -67 27 95 -2 -90 88 25 -55 76 17 -21 -94 72 -34 -45 -73 41 99 -86 92 69 53 -84 27 -30 87 58 -64 48 52 26 -45 -58 68 40 48 -11 75 72 3 93 -46 -87 -62 -62 44 87 73 43 -14 -10 -35 -86 -1 0 35 -53 0 -35 -35 -27 -57 -12 61 67 -76 -35 48 -12 -82 -3 14 65 26 19 91 -26 54 -47 76 63 47 98 87 -18 -39 29 -12 -89 77 -83 -2 99 -67 -16 -24 48 -6 -57 -35 86 20 67 38 81 11 99 24 86 -78 -37 -34 -31 73 -87 80 36 -93 -3 95 54 -70 -76 -16 -95 -48 -19 18 87 -48 -60 -17 -90 45 -12 -1 37 -28 -92 58 -91 -61 -26 -6 97 -31 84 -56 56 -15 17 -87 -18 -51 -72 48 -24 57 -25 -34 62 -63 -28 -69 81 64 69 -27 73 -47 -77 -90 -37 -3 72 27 87 -35 -9 -87 -9 85 95 76 -11 14 -11 55 -42 -95 -10 94 4 -18 100 -22 -20 -62 28 -68 57 -85 -50 -95 30 -99 -20 11 -6 68 -10 -31 -32 50 -28 44 -44 68 -74 43 -18 85 -78 45 24 93 87 -46 -11 -40 48 -66 -76 -62 -11 10 5 -85 -59 71 26 -34 79 -5 -61 -60 4 -72 -83 -64 4 87 -69 85 38 -39 82 -16 99 -51 -37 -65 89 -37 62 59 -45 -63 -12 -39 31 62 -50 -8 29 -12 -4 -55 92 -41 72 -7 74 24 -44 -78 -86 64 10 55 57 -65 -37 -73 41 20 -55 -30 36 92 24 70 -73 -25 -64 -75 -41 -79 -84 -53 69 -6 42 84 -36 24 45 20 39 78 -7 27 35 60 36 42 -63 64 23 -40 -93 -35 96 83 -62 -11 61 46 -36 48 -28 -67 -70 92 -14 90 -85 14 38 -76 53 -88 84 21 -84 -24 45 62 8 3 56 -91 -1 -13 -30 1 65 -23 48 49 -10 67 -13 58 -79 -81 -38 -50 77 -51 97 90 50 -11 -19 91 94 28 -53 -60 -7 -67 97 -67 10 18 83 -15 -74 55 77 -9 -37 -74 37 -45 63 27 -66 -69 35 -67 20 96 -84 21 53 1 20 85 -72 -65 94 36 -63 78 69 100 88 6 -73 -12 24 -94 -35 90 7 -97 -61 -43 36 -57 15 -6 15 -70 -68 39 10 66 12 27 -26 -2 -16 -93 -17 60 -49 49 48 -55 82 43 -36 55 60 38 -3 37 -68 14 82 -91 -90 -100 -91 -94 12 72 29 21 100 82 -90 10 74 -39 -4 65 -57 -94 73 -56 80 93 -82 36 -31 35 -25 6 -99 76 -73 -12 -23 40 21 44 3 73 -74 -36 -69 1 76 71 5 61 80 -10 -45 37 18 5 14 -33 55 -63 3 -64 83 96 -85 67 84 38 -29 -64 77 90 31 -99 -19 -71 -80 -95 53 38 20 15 -87 -65 87 70 24 43 -59 59 -66 -52 34 47 -10 -21 41 65 -29 -62 -61 27 -23 -1 95 -53 10 -76 54 -37 51 -91 -33 -83 42 -49 40 100 -93 -21 -89 -25 9 14 -78 29 -99 -57 -31 75 39 -41 55 79 16 55 -91 11 92 7 -64 -78 -69 70 -45 -65 7 32 -17 -65 5 -98 34 44 -26 -60 -4 68 9 -62 -95 40 -80 -23 -88 64 -53 44 8 33 -63 19 100 -96 94 -32 65 -46 -63 -44 70 -6 66 59 -3 61 -35 -51 -26 75 -2 99 97 -92 48 -51 62 81 -98 87 81 69 -85 -32 -53 28 -1 63 -96 66 -17 -14 -4 49 -4 -93 43 100 5 90 -51 -51 1 -98 15 -50 -90 27 0 -75 -44 -94 -27 -79 -72 57 -38 -99 -47 7 21 -92 0 6 20 26 45 19 -17 -39 -98 93 6 93 6 -13 -6 -78 -32 -72 12 -82 -54 -42 -68 17 -68 -31 -45 -45 -64 85 -45 62 93 -79 22 54 53 26 73 79 5 75 -95 -42 -95 8 -89 86 11 -46 55 -32 -61 3 -99 -67 -88 -6 -33 23 84 -98 -48 83 -10 100 24 -45 -56 24 -71 71 -7 96 7 71 8 -47 -84 67 -29 62 -98 -99 -51 -67 65 -21 -95 16 21 -18 12 -79 -86 0 92 62 -52 0 64 22 -97 -58 -72 -33 49 80 -13 -94 20 -21 -16 -23 -69 30 -96 47 43 23 77 -63 -76 32 5 50 18 53 -53 34 36 -100 -24 38 100 -57 -43 -93 -31 72 90 61 -76 -13 99 -31 -38 -26 63 -26 -58 -33 39 -32 -81 35 38 81 -38 82 -5 -66 -92 55 -98 57 45 66 55 50 -10 -73 -9 -23 -95 -81 39 69 -53 -62 83 52 45 84 29 -48 -14 97 60 -26 83 -29 -52 20 84 48 18 24 15 1 25 -8 -61 -65 98 -97 -53 -62 16 -68 -90 26 -60 -53 -44 -14 -71 -52 -6 0 -77 1 -92 -61 31 -20 -61 0 -13 100 -4 -58 -51 15 28 47 -98 -70 -75 51 -12 -33 -65 19 92 -63 3 59 -54 66 -96 93 -35 -70 -32 79 63 80 -74 -42 -34 -45 -87 39 87 -75 78 -11 -8 9 38 83 -28 97 8 -6 98 29 76 -62 -73 -57 20 21 35 60 52 -55 -1 -45 35 -53 36 -71 99 95 19 -25 -2 23 100 12 90 84 5 -21 -98 -2 86 -63 -76 41 -60 79 88 -87 -26 -86 -88 4 -89 57 -91 68 99 22 6 -72 53 7 -87 -48 9 47 26 3 -45 81 -80 -30 69 -89 -95 -64 92 14 51 15 -52 -27 31 -86 28 -58 7 39 21 -54 -7 -26 67 67 -62 -14 -89 16 -86 -2 -18 -12 83 -88 -87 7 -23 -17 5 -36 52 -27 27 68 21 75 19 23 22 0 25 32 -70 -69 9 62 3 44 11 33 -22 5 49 -18 -32 -89 -42 12 -57 1 -57 -99 82 -28 9 8 87 12 -70 -46 -63 -45 -70 -29 80 74 49 59 -65 -82 -24 84 79 -49 82 58 0 12 78 25 -49 4 -20 83 85 -85 -90 83 -69 22 -28 83 -48 71 47 24 9 -2 -28 52 -18 85 47 -63 50 25 -16 -14 -13 -61 2 77 36 -26 26 34 -96 65 87 -14 -86 62 -45 -61 36 22 -83 60 -32 31 31 -44 -12 -40 -10 -88 82 -15 96 41 -86 69 86 5 -86 95 -99 -20 95 -83 16 12 61 87 -24 -19 -53 -8 -89 69 -96 78 46 78 24 11 -95 89 -52 -66 -98 -36 -19 52 -79 -15 34 22 60 -72 -38 -50 -72 90 -81 48 -47 -11 97 -85 63 -98 -63 -67 -54 9 62 -85 75 -34 98 -71 2 -14 90 83 11 99 65 21 -39 -2 73 -3 90 71 70 -75 12 -92 62 -20 -31 79 77 26 -21 -10 100 -28 74 -18 -20 49 -92 91 -17 26 80 -39 49 -61 97 3 4 85 -78 69 79 26 -77 -55 -48 -31 -74 32 -7 28 -52 -86 -58 -42 -79 74 34 -91 -80 -61 40 -14 46 -1 -9 37 61 82 -56 -81 -6 45 -88 -82 -11 -92 22 62 -71 12 39 -95 -80 -12 26 43 92 87 -84 33 25 39 -95 -72 37 -26 -92 62 78 -20 -54 20 45 47 -10 27 -24 4 -66 79 -94 34 -81 24 -31 29 96 -59 -41 41 -14 56 67 -43 -10 -48 60 -44 -75 -16 -29 -18 28 -98 64 98 96 73 -96 81 78 -19 18 79 14 99 -25 33 -70 -72 -89 46 41 4 -48 -4 1 15 -89 -50 17 -34 -9 92 -75 -85 24 -71 -68 -38 85 -78 -73 13 -6 -55 -59 1 76 -30 -79 98 100 57 94 4 -86 -94 -65 -100 -46 -28 5 1 87 65 93 -76 59 -25 -65 -69 0 -7 60 -97 -70 -52 -11 10 -38 51 -100 69 48 92 12 46 23 63 -83 44 -72 -27 5 -20 27 89 -46 45 94 6 -77 -67 46 28 22 -89 -70 70 -25 -84 27 25 11 -50 -97 94 -4 5 -56 76 90 2 20 16 -79 29 -20 -86 9 29 -77 14 13 79 -86 82 37 -76 -6 -44 -25 -26 -34 -60 44 -53 -58 45 -84 -96 -44 66 -48 -22 -19 97 -8 85 -69 42 -21 99 -54 -42 -28 -68 32 19 -25 1 -37 -25 88 -93 26 -47 3 19 -73 -77 93 31 4 -22 -51 -12 94 25 -18 -80 -39 -56 13 31 -60 -56 30 46 44 61 -32 -26 -85 -92 60 -40 -100 -23 -57 -6 -89 -76 -73 -98 18 -44 -89 92 -12 -56 36 27 -34 -44 -64 93 96 68 -64 -45 -49 -24 69 94 3 -94 -48 2 83 -2 40 -76 90 -86 -7 82 66 -43 -56 54 -89 -88 -35 -59 34 0 -45 24 91 100 66 18 96 -72 -34 -75 -55 89 65 80 59 22 -85 97 -92 -49 -42 43 -26 24 -34 77 44 -79 -2 21 64 -30 6 75 27 22 -21 -96 -1 -33 -44 97 -24 -11 -96 22 -37 89 22 95 18 43 -23 89 -21 -1 98 -35 68 -25 -27 78 47 -37 -39 88 5 21 32 -61 46 -28 -53 97 30 64 5 93 72 -76 62 -98 78 -41 -81 -86 48 99 -97 -48 -18 16 -11 54 -18 -37 74 32 -44 -82 29 93 21 51 -70 -81 -13 34 -1 93 -48 50 68 71 11 99 53 25 31 -71 80 -33 -27 98 95 -53 56 -35 86 -10 -77 64 -67 21 95 -24 91 -38 -33 93 -61 -87 64 -67 -72 -76 -90 -5 -24 -2 77 -43 -9 -37 -73 11 35 -5 64 -35 -21 -9 -12 71 27 -44 61 88 -28 -24 70 -53 66 -56 5 4 -33 18 -7 88 6 7 97 27 65 87 4 -40 53 99 80 -15 -28 97 52 5 -84 47 22 27 94 57 -34 -72 31 -83 12 100 -36 52 3 -72 5 -24 68 -69 26 97 50 86 -73 -98 -12 -40 -21 -68 67 20 -8 -48 -75 -60 9 97 -56 -67 -35 21 -94 -19 39 25 70 45 66 5 2 28 -11 41 68 42 72 -78 52 63 -96 78 -86 47 -66 80 -53 -83 27 80 0 29 2 46 97 83 -28 52 10 57 46 32 -48 -89 -4 -23 -71 22 81 -75 -66 92 1 93 -63 -67 73 74 -68 86 -29 29 -22 -98 46 -11 25 -78 -14 15 85 35 -49 -52 77 -70 5 -56 -50 32 -78 -45 -21 99 66 11 -85 26 -5 -36 80 -43 -6 4 -35 -40 -8 -88 64 -43 -31 79 2 -86 -36 -35 -53 -44 -69 -16 -99 16 -11 13 -71 72 98 68 -100 16 3 -52 75 18 47 -52 -66 78 0 40 69 90 -47 48 -24 -41 -66 29 -90 3 -63 14 80 32 -14 -14 -100 67 -6 91 91 19 24 40 81 -23 -14 -16 35 2 10 -87 -25 22 41 -22 26 75 -97 89 -97 96 -33 -52 22 77 84 22 9 -14 -93 -73 -34 -84 -37 -50 -29 55 -58 -39 -66 0 -81 -3 46 67 -18 33 -66 -34 96 10 -91 -11 -60 74 77 -38 -93 -36 40 15 40 -66 66 -56 -84 41 16 -67 -66 55 15 -42 -5 -72 -30 2 -1 -4 52 -42 -58 -59 71 -62 -8 66 19 38 -13 21 -25 99 -95 -89 16 -70 28 -97 22 -55 -69 12 11 -66 -48 24 15 -27 67 28 -47 52 -25 -68 52 -86 -45 64 -85 -30 51 -98 -37 77 ...
//        There are 5 lines in the input
//
//        Line 1 ( Corresponds to arg 1 ) : 2 D array. First 2 integers R, C are the number of rows and columns. Then R * C integers follow corresponding to the rowwise numbers in the 2D array
//
//        Line 2 ( Corresponds to arg 2 ) : An integer array. First number is the size S of the array. Then S numbers follow which indicate the elements in the array.
//
//        Line 3 ( Corresponds to arg 3 ) : An integer array. First number is the size S of the array. Then S numbers follow which indicate the elements in the array.
//
//        Line 4 ( Corresponds to arg 4 ) : An integer array. First number is the size S of the array. Then S numbers follow which indicate the elements in the array.
//
//        Line 5 ( Corresponds to arg 5 ) : An integer array. First number is the size S of the array. Then S numbers follow which indicate the elements in the array.
//
//        Test As Custom Input
//        The expected return value:

//        Your function returned the following:
//        -537 -2062 2662 1988 5445 94 -1017 -4233 -4735 -2537 3024 -838 -980 800 -629 763 -7980 -133 590 -3279 -970 2730 443 -606 2245 1754 -3162 772 417 -775 1123 1390 -662 -2394 -97 -3799 -1190 -6756 -3647 639 -1453 -2525 -1000 -793 -1041 1239 721 107 -2780 1138 2175 306 -2072 -3148 443 -639 -131 -1962 -5360 -53 262 4 -163 198 -5151 -1154 1078 -1598 1717 326 359 -744 -1788 372 911 410 1322 -5762 473 -1704 393 -26 -1012 3246 -75 -507 169 -556 806 5209 -1686 -755 56 -1999 -3107 -878 347 1658 -3054 478 -2849 -4044 1691 1114 -672 -2620 -92 -3241 -2438 1100 867 -5335 2621 -1066 -6094 914 -1362 -5874 1953 5003 1974 964 -3888 2474 1235 -2920 -1294 -437 -651 -977 1795 -98 -4456 -2065 -3253 -520 2054 -1496 257 2446 2586 455 -2265 505 -999 -121 2490 325 543 -104 -1503 -882 -4307 2382 -1550 -496 1529 -696 -204 -659 -2867 865 1263 1736 -191 -2651 -921 -1678 -4021 -2435 1177 2757 525 -651 1749 -278 -1575 -1153 -386 55 236 -5476 691 -1022 -1054 1332 -5392 -463 555 447 -3021 651 -730 2864 -799 -6346 1750 -3367 2949 -2738 2784 553 22 -283 -453 2735 1004 -3989 615 -1522 45 34 -525 4443 -2966 -1493 1016 1914 -389 1990 -1434 -3483 -557 -4572 13 1487 659 6867 0 825 -731 -947 965 -1833 996 -231 -563 -348 -343 -170 2876 -4602 -222 1750 -655 -2079 -77 -723 -982 112 -413 139 -2553 1002 1269 -980 2063 -785 -4294 -2363 -470 -3104 -301 -932 -3292 136 3345 -2840 -381 276 -1486 -476 -3320 -160 -1053 352 -196 -1332 1069 -433 456 524 -1554 -459 -2609 355 265 -551 341 -787 504 -1656 -10 390 4998 3258 121 -4504 -223 3657 -515 -608 -4277 -2639 4348 6307 -4218 -1939 -884 21 -2572 1310 -537 -1509 -300 234 -2575 2012 -4697 177 -919 959 -313 593 2772 504 -946 -59 -3215 -982 -2750 -5442 -3067 -1792 -770 -2393 620 -1958 118 -900 -143 -220 -1568 872 53 -1048 -934 1433 -3213 554 1918 2661 6165 -3018 -1173 -229 -2070 177 -670 -330 -2851 5192 -7674 -1396 -639 487 -42 1210 1705 350 -7133 -2716 -934 -2157 1289 482 -2568 65 1559 2287 -5822 -647 2281 877 -944 2160 70 -3191 34 1144 -146 1089 294 -655 -1311 4371 -379 -3905 1896 -849 650 -304 619 -3969 -1326 1209 -4 1500 -277 -1126 -1652 864 -2645 -656 390 114 936 -2547 -156 1374 2212 -1552 2740 635 1036 -3739 1202 -3221 -466 1858 96 -1065 6483 4535 177 -426 -175 2213 872 1873 -1304 1184 4803 -999 99 -572 -1221 -1860 -5342 1006 -3098 -72 1117 -7990 -6908 -2159 -18 -2529 14 163 511 -3640 1722 1564 -1678 -3980 -1140 -2839 -1738 -4284 -753 1624
//        Final Verdict
//        > Wrong Answer
