package scaler.advancedDsa.sorting1;

import java.util.Arrays;

public class HWQ1ChocolateDistribution {
//    Problem Description
//    Given an array A of N integers where the i-th element represent the number of chocolates in the i-th packet.
//    There are B number of students, the task is to distribute chocolate packets following below conditions:
//            1. Each student gets one packet.
//2. The difference between the number of chocolates given to any two students is minimum.
//    Return the minimum difference (that can be achieved) between the student who gets minimum number of chocolates and the student who gets maximum number of chocolates.
//    Problem Constraints
//0 <= N <= 10^5
//            1 <= A[i] <= 10^7
//            0 <= B <= 10^5
//    Input Format
//    The first argument contains an integer array A.
//    The second argument contains an integer B.
//            Output Format
//    Return the minimum difference (that can be achieved) between maximum and minimum number of chocolates distributed.
//    Example Input
//    Input:
//    A : [3, 4, 1, 9, 56, 7, 9, 12]
//    B : 5
//    Example Output
//    Output:
//            6
//    Example Explanation
//    Explanation:
//    We can choose the packets with chocolates = [3, 4, 9, 7, 9]
//    The difference between maximum and minimum is 9-3 = 6

    public int solve(int[] A, int B) {
        if (B <= 0 || A.length == 0)
            return 0;
        //bubblesort(A);

        mergeSort(A, 0, A.length - 1);
//        System.out.println(Arrays.toString(A));
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < A.length - B + 1; i++) {
            min = Math.min(min, A[B + i - 1] - A[i]);
        }
        return Integer.MAX_VALUE == min ? 0 : min;
    }


    private void mergeSort(int[] a, int l, int r) {
        if (l == r)
            return;
        int mid = (r + l) / 2;
        mergeSort(a, l, mid);
        mergeSort(a, mid + 1, r);
        merge(l, r, a, mid + 1);
    }

    private void merge(int l, int r, int[] arr, int y) {
//        System.out.printf("l=%s,r=%s,y=%s,arr=%s%n", l, r, y, Arrays.toString(arr));
        int i = l;
        int j = y;
        int index = 0;
        int[] ansArr = new int[r - l + 1];
        while (i <= y - 1 && j <= r) {
            if (arr[i] <= arr[j]) {
                ansArr[index++] = arr[i++];
            } else {
                ansArr[index++] = arr[j++];
            }
        }
        while (i <= y - 1) {
            ansArr[index++] = arr[i++];
        }
        while (j <= r) {
            ansArr[index++] = arr[j++];
        }
        i = l;
        for (int k = 0; k < ansArr.length; k++) {
            arr[i++] = ansArr[k];
        }
    }


    private void bubblesort(int[] A) {
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < A.length - 1; j++) {
                if (A[j] > A[j + 1]) {
                    int temp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = temp;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] inputA = {3, 4, 1, 9, 56, 7, 9, 12};
        int inputB = 5;
        System.out.println(new HWQ1ChocolateDistribution().solve(inputA, inputB));

        int[] A = {1, 2, 3};
        int B = 0;
        System.out.println(new HWQ1ChocolateDistribution().solve(A, B));

        int[] input2A = {};
        int input2B = 1;
        System.out.println(new HWQ1ChocolateDistribution().solve(input2A, input2B));

        int[] input3A = {4647632, 2905779, 6606570, 7578874, 1074817, 7663052, 1634778, 7231069, 982073, 7230174, 5803012, 2648232, 1391755, 2042043, 9350088, 8449833, 8654167, 6489783, 2151832, 5108534, 8241468, 201110, 7515149, 2103735, 687072, 5003124, 778137, 7029191, 979260, 628472, 4885206, 8143243, 6050602, 1491775, 5722116, 7125418, 9154827, 7356893, 6872839, 2653251, 7103418, 5192202, 7817834, 1011524, 7234244, 9684274, 1977709, 8404763, 8690408, 6645892, 6029648, 9448227, 6847001, 6061149, 1551961, 50424, 3580624, 4846449, 9595967, 4559883, 5474920, 4481172, 2703125, 4041874, 8489299, 941592, 1167291, 7644125, 814836, 556481, 2813727, 434605, 5748682, 631560, 3962481, 5499278, 2832185, 5940189, 3904040, 1522592, 2586080, 2450039, 970819, 1949432, 8511187, 5039131, 1999856, 2091810, 9885580, 4112174, 9168044, 7876851, 8593345, 4387520, 1918724, 7082643, 7845463, 5602367, 7243119, 1176650, 6158847, 56845, 1611255, 1907529, 3204757, 5573735, 9923158, 6036941, 4030275, 3827197, 75885, 9132706, 8793587, 3563055, 1082137, 7304774, 1118537, 5598344, 1912935, 1004116, 9710517, 1080979, 1397319, 820214, 7984850, 5832394, 7902856, 5830313, 1434760, 5145975, 7006962, 109959, 7719171, 1134568, 4533839, 923927, 9224654, 4456996, 9477220, 3254928, 800544, 2069456, 2387633, 9594130, 8148862, 5986122, 9415255, 9267398, 4100817, 1328190, 2787866, 3811334, 4925520, 4185184, 7147899, 5426721, 17577, 5050754, 1257033, 3968689, 2713080, 780347, 6594999, 2948603, 1914914, 1128837, 6388881, 1139568, 8102184, 8382452, 6910847, 1419079, 451907, 9298480, 1013208, 1117120, 7800953, 2944815, 384518, 1901769, 6789356, 3172383, 8229454, 1714875, 9873918, 5377352, 9657947, 9891494, 2944458, 914980, 6376534, 8173889, 4211678, 2971532, 1122491, 6126591, 6616720, 7511372, 7266158, 7235255, 5893823, 6693357, 8654333, 8862082, 8508188, 2183893, 9979201, 6309140, 5128707, 2880070, 727260, 1918062, 6052452, 8956714, 6149288, 8442721, 6850417, 5807234, 850567, 2311226, 9238565, 7227100, 485115, 3450242, 2714984, 4123957, 9576833, 1848055, 1635328, 9359342, 9083310, 45503, 6052698, 7737642, 1423936, 4560885, 2437886, 3919488, 3386376, 7566592, 6799558, 4113636, 9484653, 5368361, 5586701, 5633940, 3811082, 2437117, 3957526, 4661648, 7264695, 3196090, 1888747, 7749809, 6646332, 7120082, 1873765, 8739516, 8968137, 6025445, 615209, 567798, 8587299, 9184259, 821791, 2527586, 3745143, 3259677, 6447073, 9647871, 826268, 3246630, 3761506, 2827273, 8614991, 1864558, 977564, 2426072, 6818026, 4935089, 9604071, 4082720, 647531, 1492817, 1832528, 9810214, 1129251, 6222645, 8549729, 2613739, 4764441, 1681289, 3181536, 5868091, 865547, 4003326, 8395676, 7127042, 9779354, 4842748, 6774912, 605622, 605730, 3052769, 5949246, 9220720, 4917326, 6926809, 4163143, 1735351, 1861898, 3767213, 5818071, 5025780, 7776381, 166950, 4835993, 8905631, 8905946, 5902073, 1519369, 6186738, 7583361, 7217256, 2054828, 8448908, 3736934, 2966855, 8092301, 3516287, 325955, 4867212, 6638260, 931684, 436332, 2587505, 152403, 7870009, 2030666, 4315545, 9605359, 6408915, 599109, 7939781, 1434694, 8375489, 623083, 6270686, 9797472, 2045380, 4689110, 3833192, 8232118, 2272470, 1050448, 2803297, 3237729, 4787381, 5770152, 1330029, 820019, 8612458, 6197240, 9974631, 9544141, 9149923, 5078487, 9696543, 7019931, 7109152, 6528439, 9141642, 3518066, 9643899, 9597774, 7469111, 8019387, 220856, 3739796, 7816858, 4782588, 945257, 1650050, 3014705, 3217727, 5216849, 8334353, 6455455, 2520581, 6620856, 7785484, 3340599, 5233313, 6499075, 3315229, 4777453, 8165350, 910068, 6990347, 5185280, 8019219, 6035137, 4326921, 4053637, 5679035, 6441047, 1522747, 6214774, 6661902, 7778895, 4031631, 3960841, 8724151, 8198032, 6975545, 1941877, 3414880, 5309898, 913684, 8451812, 1930753, 1215519, 1792411, 9680418, 230945, 7623991, 4457870, 8396294, 8534058, 3964569, 6097926, 9069629, 9999705, 2941198, 3123265, 8195092, 9382244, 4646011, 4409865, 8560498, 2424905, 957847, 2521338, 1149056, 9155879, 2013235, 5607284, 5087110, 7323132, 9037319, 3538922, 1770236, 252837, 7847684, 3967005, 3000134, 5471674, 8424875, 1396427, 6522084, 4905795, 7494352, 5591712, 4905499, 2951902, 8714976, 3100590, 2334145, 5877338, 7510454, 3410994, 8302243, 8468301, 5932332, 1967650, 140531, 7945566, 91285, 7743992, 7785049, 9128604, 1282913, 2071636, 9381440, 1646948, 6038641, 2381573, 9634974, 6979867, 6294352, 6157057, 1885661, 6305055, 4265120, 9307511, 9256956, 2980095, 2408101, 4107453, 1373784, 2434906, 7518446, 9676026, 3419558, 3450777, 4160027, 3560088, 3912694, 4251312, 3820432, 1697742, 3379915, 5103344, 6285730, 5277706, 6750292, 2324370, 7659279, 6385265, 1820588, 6469982, 5058673, 6222600, 2775036, 9323792, 5530110, 4548344, 4820238, 454562, 8655796, 6194021, 2889468, 6174241, 8386399, 8825377, 2141370, 2546425, 4901817, 6054063, 6797736, 8722248, 268157, 2694002, 6341943, 6553886, 7971708, 5608586, 1394607, 8147338, 4510202, 3215194, 4617319, 9568874, 9437793, 9908706, 1409017, 7484254, 4457049, 8745606, 7938816, 5629196, 7455979, 3344635, 4319789, 5842377, 4686363, 6461158, 905153, 9588179, 2515220, 219241, 826778, 2783376, 2913242, 7168721, 1853613, 3401301, 2777306, 3248219, 1548638, 9803860, 8979764, 8682308, 9372733, 933908, 1107366, 3298102, 8418162, 8080766, 2043707, 8873329, 3709962, 2016037, 2217963, 8029750, 7858413, 6904325, 7007259, 1279918, 9008856, 2038830, 1499158, 9835633, 4822206, 6928751, 9520705, 9192170, 330052, 2298011, 2440389, 4395041, 2101870, 1420152, 5593701, 3990954, 2354060, 6701066, 9805407, 3288573, 7298183, 4365466, 2161901, 1008144, 6381502, 6896215, 1554245, 6756267, 3800539, 8561503, 8036184, 5325746, 600333, 2051693, 7677731, 7938890, 8980443, 7198435, 9647411, 9310494, 2012797, 2087799, 6221887, 4114666, 6024303, 1815587, 621972, 894714, 1033004, 2943730, 4183286, 847538, 7309195, 6345186, 4372034, 6207049, 3241400, 5926278, 2963315, 9558290, 7004133, 3515850, 4884036, 120817, 5567542};
        int input3B = 218;
        System.out.println(new HWQ1ChocolateDistribution().solve(input3A, input3B));
    }


}
