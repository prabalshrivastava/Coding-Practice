package scaler.advancedDsa.twopointers;

public class HWQ6AnotherCountRectangles {
    //    Problem Description
//    Given a sorted array of distinct integers A and an integer B, find and return how many rectangles with distinct configurations can be created using elements of this array as length and breadth whose area is lesser than B.
//            (Note that a rectangle of 2 x 3 is different from 3 x 2 if we take configuration into view)
//    Problem Constraints
//1 <= |A| <= 100000
//            1 <= A[i] <= 109
//            1 <= B <= 109
//    Input Format
//    The first argument given is the integer array A.
//    The second argument given is integer B.
//            Output Format
//    Return the number of rectangles with distinct configurations with area less than B modulo (109 + 7).
//    Example Input
//    Input 1:
//    A = [1, 2]
//    B = 5
//    Input 2:
//    A = [1, 2]
//    B = 1
//    Example Output
//    Output 1:
//            4
//    Output 2:
//            0
//    Example Explanation
//    Explanation 1:
//    All 1X1, 2X2, 1X2 and 2X1 have area less than 5.
//    Explanation 2:
//    No Rectangle is valid.
    public static void main(String[] args) {
        int[] input1A = {1, 2};//4
        int input1B = 5;
        System.out.println(new HWQ6AnotherCountRectangles().solve(input1A, input1B));
        int[] input2A = {1, 2};//0
        int input2B = 1;
        System.out.println(new HWQ6AnotherCountRectangles().solve(input2A, input2B));
        int[] input3A = {1, 2, 3, 4, 5};//8
        int input3B = 5;
        System.out.println(new HWQ6AnotherCountRectangles().solve(input3A, input3B));
        int[] input4A = {51, 95, 197, 250, 349, 387, 446, 621, 702, 767, 801, 895, 997, 1242, 1460, 1620, 1640, 1652, 1920, 1959, 1972, 2129, 2231, 2258, 2334, 2340, 2365, 2405, 2455, 2573, 2738, 2848, 2882, 3160, 3244, 3441, 3457, 3681, 3994, 4012, 4138, 4333, 4409, 4427, 4577, 4648, 4730, 4781, 4889, 4959, 4984, 5058, 5306, 5365, 5485, 5535, 5633, 5689, 5694, 5736, 5790, 5844, 5854, 5868, 5906, 5954, 6013, 6221, 6250, 6252, 6404, 6419, 6430, 6595, 6895, 6904, 6934, 7084, 7162, 7232, 7297, 7389, 7588, 7923, 8008, 8028, 8094, 8131, 8159, 8222, 8232, 8257, 8381, 8585, 8632, 8727, 8836, 8850, 9032, 9172, 9184, 9253, 9348, 9408, 9566, 9605, 9625, 9685, 9863, 9904, 9932, 9940, 9988, 10001, 10129, 10151, 10181, 10405, 10436, 10512, 10572, 10574, 10647, 10699, 10757, 10778, 10933, 10995, 11130, 11276, 11407, 11428, 11483, 11539, 11581, 11626, 11650, 11679, 11682, 11684, 11748, 11831, 11850, 11891, 11914, 11945, 12019, 12037, 12046, 12073, 12404, 12560, 12582, 12684, 12765, 12791, 12810, 13002, 13154, 13352, 13504, 13517, 13536, 13575, 13717, 13847, 13851, 13891, 14063, 14094, 14130, 14240, 14310, 14399, 14422, 14446, 14595, 14612, 14615, 14708, 14816, 14850, 14962, 15006, 15190, 15193, 15203, 15212, 15343, 15682, 15837, 15899, 15992, 16235, 16248, 16499, 16519, 16656, 16690, 16756, 16869, 16884, 16899, 17014, 17279, 17280, 17292, 17561, 17564, 17685, 17758, 17769, 17803, 17804, 17952, 17994, 18096, 18185, 18218, 18258, 18332, 18362, 18446, 18585, 18686, 18771, 18805, 18806, 18828, 18836, 18841, 19048, 19129, 19189, 19247, 19281, 19375, 19430, 19527, 19564, 19580, 19754, 19793, 19916, 20047, 20077, 20205, 20320, 20471, 20496, 20648, 20759, 20854, 20908, 20928, 21018, 21031, 21052, 21102, 21112, 21157, 21234, 21407, 21423, 21428, 21652, 21694, 21728, 21748, 21758, 21767, 21855, 21896, 21962, 21992, 22004, 22106, 22271, 22288, 22399, 22405, 22453, 22487, 22642, 22804, 22966, 23036, 23179, 23253, 23367, 23577, 23794, 23833, 23838, 23966, 24110, 24145, 24340, 24436, 24444, 24625, 24798, 24815, 24915, 24921, 25212, 25577, 25579, 25707, 25740, 25784, 25827, 25842, 25956, 25958, 26163, 26391, 26445, 26614, 26748, 26757, 26805, 26836, 27065, 27179, 27240, 27315, 27341, 27383, 27421, 27465, 27721, 27858, 27928, 28188, 28286, 28363, 28404, 28457, 28574, 28576, 28695, 28706, 28731, 29059, 29232, 29333, 29348, 29363, 29501, 29530, 29603, 29715, 29779, 29880, 29952, 30021, 30160, 30177, 30258, 30309, 30359, 30445, 30490, 30634, 30719, 30772, 30870, 30894, 30946, 30949, 30983, 31029, 31059, 31123, 31130, 31131, 31196, 31237, 31358, 31394, 31407, 31511, 31625, 31746, 31912, 31919, 32292, 32305, 32398, 32428, 32459, 32485, 32526, 32584, 32629, 32631, 32649, 32668, 32673, 32679, 32756, 32778, 32952, 32982, 33222, 33244, 33360, 33364, 33511, 33533, 33797, 33835, 34027, 34153, 34280, 34315, 34316, 34326, 34370, 34418, 34712, 34800, 34841, 34890, 35022, 35023, 35099, 35117, 35134, 35206, 35208, 35354, 35572, 35645, 35721, 35936, 36092, 36094, 36170, 36435, 36721, 36748, 36922, 36925, 36939, 37075, 37119, 37177, 37201, 37491, 37517, 37586, 37846, 37907, 38250, 38413, 38550, 38816, 38840, 38856, 38918, 38927, 39145, 39267, 39396, 39429, 39447, 39458, 39477, 39495, 39537, 39739, 39870, 39880, 39924, 39961, 40097, 40098, 40214, 40230, 40374, 40490, 40601, 40618, 40650, 40696, 40707, 40791, 40801, 40818, 40893, 40926, 41025, 41066, 41074, 41080, 41237, 41319, 41480, 41486, 41706, 41739, 41826, 41972, 41973, 42037, 42166, 42268, 42409, 42440, 42458, 42539, 42623, 42644, 42651, 42661, 42664, 42785, 43043, 43141, 43235, 43384, 43536, 43609, 43855, 44061, 44129, 44149, 44152, 44205, 44235, 44246, 44385, 44558, 44592, 44594, 44633, 44676, 44764, 44806, 44901, 45004, 45097, 45164, 45197, 45355, 45364, 45369, 45371, 45511, 45572, 45734, 45768, 45835, 45904, 46134, 46175, 46205, 46250, 46255, 46375, 46772, 46808, 46867, 46885, 46935, 46996, 47140, 47156, 47357, 47428, 47448, 47451, 47529, 47560, 47675, 47982, 48012, 48015, 48194, 48338, 48474, 48550, 48580, 48639, 48666, 48979, 49125, 49265, 49517, 49614, 49983, 50010, 50047, 50080, 50088, 50143, 50184, 50191, 50291, 50357, 50391, 50467, 50517, 50677, 50692, 50800, 50899, 51328, 51396, 51404, 51436, 51552, 51561, 51613, 51627, 51782, 51828, 51889, 51951, 51990, 52069, 52134, 52137, 52198, 52261, 52314, 52340, 52406, 52486, 52634, 52705, 52747, 52766, 52836, 52888, 52967, 53071, 53325, 53363, 53410, 53525, 53649, 54043, 54127, 54167, 54547, 54553, 54594, 54684, 54766, 54853, 55094, 55124, 55183, 55229, 55238, 55244, 55336, 55395, 55449, 55463, 55485, 55496, 55509, 55511, 55844, 55937, 55959, 55961, 56065, 56081, 56104, 56191, 56238, 56265, 56428, 56461, 56464, 56562, 56585, 56739, 56744, 56873, 57028, 57096, 57423, 57430, 57522, 57553, 57748, 57750, 57764, 57894, 58083, 58234, 58280, 58403, 58506, 58527, 58559, 58664, 58702, 58712, 58725, 58774, 58916, 58969, 58973, 59137, 59144, 59145, 59187, 59190, 59207, 59213, 59256, 59262, 59290, 59322, 59413, 59439, 59536, 59549, 59728, 59926, 59938, 60120, 60184, 60394, 60476, 60497, 60935, 61226, 61274, 61284, 61298, 61337, 61406, 61418, 61506, 61567, 61622, 61630, 61715, 61733, 61788, 61820, 61879, 62190, 62297, 62433, 62610, 62689, 62815, 62843, 62881, 62883, 62937, 62954, 63049, 63070, 63081, 63192, 63317, 63409, 63588, 63685, 63794, 63815, 63834, 63864, 63920, 64187, 64358, 64372, 64439, 64539, 64561, 64607, 64790, 64863, 64968, 64987, 65003, 65448, 65484, 65603, 65618, 65646, 65667, 65725, 65800, 65821, 65850, 65922, 65932, 65989, 66087, 66313, 66570, 66623, 66633, 66645, 66702, 66752, 67043, 67045, 67211, 67510, 67622, 67645, 67728, 68169, 68605, 68668, 68826, 68902, 69040, 69212, 69398, 69444, 69743, 69749, 69784, 69859, 69896, 70025, 70199, 70256, 70288, 70311, 70355, 70391, 70396, 70559, 70768, 70826, 70999, 71095, 71163, 71184, 71271, 71318, 71485, 71664, 71690, 71696, 71750, 71794, 71814, 71862, 71902, 72098, 72134, 72235, 72321, 72763, 72811, 72900, 73035, 73105, 73262, 73266, 73433, 73458, 73512, 73517, 73590, 73824, 73839, 73848, 73966, 74204, 74212, 74487, 74542, 74578, 74586, 74634, 74721, 74762, 74845, 74999, 75001, 75047, 75054, 75250, 75447, 75522, 75569, 75584, 75692, 75722, 75748, 75778, 75829, 76181, 76357, 76366, 76675, 76764, 76880, 76943, 76952, 77017, 77047, 77089, 77132, 77145, 77164, 77445, 77472, 77609, 77830, 77849, 77874, 77993, 78165, 78221, 78375, 78510, 78520, 78522, 78783, 78789, 78855, 78942, 78959, 78976, 78982, 78985, 79439, 79523, 79642, 79711, 79725, 79755, 79758, 79839, 79956, 80042, 80056, 80110, 80245, 80270, 80287, 80387, 80436, 80525, 80632, 80815, 80937, 81041, 81083, 81182, 81197, 81204, 81357, 81393, 81488, 81575, 81604, 81793, 81858, 81870, 81884, 81982, 82030, 82037, 82054, 82057, 82127, 82130, 82156, 82258, 82320, 82351, 82402, 82525, 82564, 82652, 82946, 83192, 83242, 83296, 83318, 83403, 83479, 83530, 83538, 83563, 83633, 83645, 83685, 83958, 83969, 84025, 84091, 84135, 84177, 84494, 84569, 84665, 85008, 85067, 85259, 85289, 85301, 85318, 85443, 85468, 85589, 85592, 85822, 85887, 85982, 85989, 86049, 86146, 86488, 86616, 86778, 87136, 87155, 87184, 87186, 87236, 87355, 87411, 87547, 87679, 87750, 87953, 88099, 88272, 88374, 88423, 88537, 88582, 88631, 88649, 88772, 88796, 88883, 88988, 89012, 89042, 89136, 89160, 89218, 89268, 89315, 89343, 89515, 89579, 89612, 89751, 89832, 89909, 90022, 90044, 90055, 90103, 90239, 90244, 90331, 90572, 90614, 90714, 90826, 90917, 90944, 90969, 90980, 90981, 91032, 91068, 91107, 91132, 91158, 91173, 91181, 91183, 91642, 91764, 92101, 92137, 92301, 92392, 92546, 92594, 92643, 92660, 92841, 92982, 93013, 93142, 93148, 93188, 93196, 93369, 93507, 93699, 93840, 93902, 93930, 93950, 93967, 94016, 94124, 94180, 94242, 94266, 94275, 94519, 94548, 94583, 94659, 94697, 94712, 94784, 94814, 94837, 94977, 95017, 95026, 95114, 95265, 95524, 95559, 95705, 95729, 95841, 95954, 96035, 96113, 96182, 96237, 96390, 96473, 96543, 96579, 96674, 96824, 97032, 97123, 97146, 97309, 97652, 97739, 97790, 97881, 97900, 97902, 97957, 98135, 98202, 98229, 98309, 98353, 98399, 98478, 98529, 98570, 98777, 98828, 98832, 98923, 99005, 99039, 99070, 99148, 99184, 99249, 99326, 99357, 99365, 99444, 99569, 99808, 99920, 99974};
        int input4B = 941326;
        System.out.println(new HWQ6AnotherCountRectangles().solve(input4A, input4B));//986
    }

    public int solve(int[] A, int B) {
        int i = 0;
        int j = A.length - 1;
        long count = 0;
        while (i < j) {
//            if (A[i] * A[i] < B) {
//                count++;
//                getModdedNumber(count);
//            }
//            if (A[j] * A[j] < B) {
//                count++;
//                getModdedNumber(count);
//            }
            long prod = (long) A[i] * A[j];
            if (prod < B) {
                count = getModdedNumber(count + getModdedNumber(getModdedNumber(j - i) * 2L));
                getModdedNumber(count);
                i++;
            } else {
                j--;
            }
        }
        for (int k = 0; k < A.length; k++) {
            long prod = (long) A[k] * A[k];
            if (prod < B) {
                count++;
                getModdedNumber(count);
            }
        }
        return (int) getModdedNumber(count);
    }

    long getModdedNumber(long A) {
        long C = (long) (Math.pow(10, 9) + 7);
        if (A < 0) {
            return (A + C) % C;
        } else
            return A % C;
    }
}
